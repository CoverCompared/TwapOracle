{
  "address": "0x58aCD5dEa226B4cb3eC965243E8AaEc2d961FF50",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockTimestampLast",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ed3b76a847af2fc10e383745ba7a7a732b0579124bac861f9077e7a5c64fcb4",
  "receipt": {
    "to": null,
    "from": "0x5569BDF4e02cec3fE459796e3d0e741616029fA4",
    "contractAddress": "0x58aCD5dEa226B4cb3eC965243E8AaEc2d961FF50",
    "transactionIndex": 20,
    "gasUsed": "1094889",
    "logsBloom": "0x
    "blockHash": "0xc8bd1eaa0ed6c413bf1deaae6f1e73384f0385f11055345fed8ea361e79a3296",
    "transactionHash": "0x0ed3b76a847af2fc10e383745ba7a7a732b0579124bac861f9077e7a5c64fcb4",
    "logs": [],
    "blockNumber": 9707788,
    "cumulativeGasUsed": "1917379",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
    "0x53fb43BaE4C13d6AFAD37fB37c3fC49f3Af433F5",
    "0x9e8C1866C4a212aca9438b3c43285be05b9bE66e"
  ],
  "solcInputHash": "9c0266427de0c8f3b277ad2f3cbbad3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TwapOraclePriceFeed.sol\":\"TwapOraclePriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"contracts/TwapOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/ITwapOraclePriceFeed.sol\\\";\\n\\nimport \\\"./libraries/FixedPoint.sol\\\";\\nimport \\\"./libraries/UniswapV2OracleLibrary.sol\\\";\\nimport \\\"./libraries/UniswapV2Library.sol\\\";\\n\\n// fixed window oracle that recomputes the average price for the entire period once every period\\n// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract TwapOraclePriceFeed is ITwapOraclePriceFeed {\\n    using FixedPoint for *;\\n\\n    uint256 public constant PERIOD = 120 seconds;\\n\\n    IUniswapV2Pair immutable pair;\\n    address public immutable token0;\\n    address public immutable token1;\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint32 public blockTimestampLast;\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    constructor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) {\\n        IUniswapV2Pair _pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\\n        pair = _pair;\\n        token0 = _pair.token0();\\n        token1 = _pair.token1();\\n        price0CumulativeLast = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\\n        price1CumulativeLast = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, \\\"UnoRe: NO_RESERVES\\\"); // ensure that there's liquidity in the pair\\n        _initialPrice(_pair);\\n    }\\n\\n    function update() external override {\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary\\n            .currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        // ensure that at least one full period has passed since the last update\\n        require(timeElapsed >= PERIOD, \\\"UnoRe: PERIOD_NOT_ELAPSED\\\");\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n    }\\n\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\\n        if (token == token0) {\\n            amountOut = price0Average.mul(amountIn).decode144();\\n        } else {\\n            require(token == token1, \\\"UnoRe: INVALID_TOKEN\\\");\\n            amountOut = price1Average.mul(amountIn).decode144();\\n        }\\n    }\\n\\n    function _initialPrice(IUniswapV2Pair _pair) private {\\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary\\n            .currentCumulativePrices(address(_pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xf5ed1d18fb9350a96d223dedec5f23c17e9816e8221992db125e07a1a56435e6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITwapOraclePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\ninterface ITwapOraclePriceFeed {\\n    function update() external;\\n\\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x93c07be9b8250abbe953aa68574a82e0e58e4a6330e190785d8a95e0762a8752\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x9a498576c2e61ba6adbf9c70a4ae8c997cebb470733c0d9c84d57f791c778fe9\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x0ce6b4d1a0979c9d2e2c5fc7560f13870e27fcef227de64831c3de2334011484\",\"license\":\"GPL-3.0\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xb3bffda43150229e831906f8eb462784bc599e4ad68a91439599fe75b5592491\",\"license\":\"GPL-3.0\"},\"contracts/libraries/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\nlibrary BitMath {\\n    // returns the 0 indexed position of the most significant bit of the input x\\n    // s.t. x >= 2**msb and x < 2**(msb+1)\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n        if (x >= 0x100000000000000000000000000000000) {\\n            x >>= 128;\\n            r += 128;\\n        }\\n        if (x >= 0x10000000000000000) {\\n            x >>= 64;\\n            r += 64;\\n        }\\n        if (x >= 0x100000000) {\\n            x >>= 32;\\n            r += 32;\\n        }\\n        if (x >= 0x10000) {\\n            x >>= 16;\\n            r += 16;\\n        }\\n        if (x >= 0x100) {\\n            x >>= 8;\\n            r += 8;\\n        }\\n        if (x >= 0x10) {\\n            x >>= 4;\\n            r += 4;\\n        }\\n        if (x >= 0x4) {\\n            x >>= 2;\\n            r += 2;\\n        }\\n        if (x >= 0x2) r += 1;\\n    }\\n\\n    // returns the 0 indexed position of the least significant bit of the input x\\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n        require(x > 0, \\\"BitMath::leastSignificantBit: zero\\\");\\n\\n        r = 255;\\n        if (x & type(uint128).max > 0) {\\n            r -= 128;\\n        } else {\\n            x >>= 128;\\n        }\\n        if (x & type(uint64).max > 0) {\\n            r -= 64;\\n        } else {\\n            x >>= 64;\\n        }\\n        if (x & type(uint32).max > 0) {\\n            r -= 32;\\n        } else {\\n            x >>= 32;\\n        }\\n        if (x & type(uint16).max > 0) {\\n            r -= 16;\\n        } else {\\n            x >>= 16;\\n        }\\n        if (x & type(uint8).max > 0) {\\n            r -= 8;\\n        } else {\\n            x >>= 8;\\n        }\\n        if (x & 0xf > 0) {\\n            r -= 4;\\n        } else {\\n            x >>= 4;\\n        }\\n        if (x & 0x3 > 0) {\\n            r -= 2;\\n        } else {\\n            x >>= 2;\\n        }\\n        if (x & 0x1 > 0) r -= 1;\\n    }\\n}\\n\",\"keccak256\":\"0x4b726e39001a8f63fed3576fb23e8971772ff4be2722b198f41e4c5e7d775c4c\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.4.0;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 public constant RESOLUTION = 112;\\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z = 0;\\n        require(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // multiply a UQ112x112 by an int and decode, returning an int\\n    // reverts on overflow\\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n        require(z < 2**255, \\\"FixedPoint::muli: overflow\\\");\\n        return y < 0 ? -int256(z) : int256(z);\\n    }\\n\\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    // lossy\\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        if (self._x == 0 || other._x == 0) {\\n            return uq112x112(0);\\n        }\\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n        // partial products\\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n        // so the bit shift does not overflow\\n        require(upper <= type(uint112).max, \\\"FixedPoint::muluq: upper overflow\\\");\\n\\n        // this cannot exceed 256 bits, all values are 224 bits\\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n        // so the cast does not overflow\\n        require(sum <= type(uint224).max, \\\"FixedPoint::muluq: sum overflow\\\");\\n\\n        return uq112x112(uint224(sum));\\n    }\\n\\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n        require(other._x > 0, \\\"FixedPoint::divuq: division by zero\\\");\\n        if (self._x == other._x) {\\n            return uq112x112(uint224(Q112));\\n        }\\n        if (self._x <= type(uint144).max) {\\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n            require(value <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n            return uq112x112(uint224(value));\\n        }\\n\\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n        require(result <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n        return uq112x112(uint224(result));\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // can be lossy\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n        if (numerator <= type(uint144).max) {\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        } else {\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n            require(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n            return uq112x112(uint224(result));\\n        }\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    // reverts on overflow\\n    // lossy\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint::reciprocal: reciprocal of zero\\\");\\n        require(self._x != 1, \\\"FixedPoint::reciprocal: overflow\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    // lossy between 0/1 and 40 bits\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        if (self._x <= type(uint144).max) {\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n        }\\n\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n        safeShiftBits -= safeShiftBits % 2;\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n    }\\n}\\n\",\"keccak256\":\"0xf48e20d216bcce69eb767d6b9171c1affd3be7dcd2ca699ade57b67eb22c9ced\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.4.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, type(uint256).max);\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & (~d + 1);\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((~pow2 + 1) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n\\n        if (h == 0) return l / d;\\n\\n        require(h < d, \\\"FullMath: FULLDIV_OVERFLOW\\\");\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x25605d30773dd632fc304c65c1f4c848b710cd84da18709dccd625eb7ed7bf58\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.0;\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\");\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = reserveOut - amountOut * 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x838f4c1f5dde84ef0872e2abe740445852bb16f4b72e4c893fd2bb0ab53d59de\",\"license\":\"GPL-3.0\"},\"contracts/libraries/UniswapV2OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2**32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(address pair)\\n        internal\\n        view\\n        returns (\\n            uint256 price0Cumulative,\\n            uint256 price1Cumulative,\\n            uint32 blockTimestamp\\n        )\\n    {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ef5985bbe5e55068165d9c0acd639662c752d425daa5cb2490d385b59295a99\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001f1438038062001f14833981016040819052620000349162000bff565b60006200004e8484846200037c60201b620004051760201c565b9050806001600160a01b03166080816001600160a01b031660601b81525050806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015620000a757600080fd5b505afa158015620000bc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000e2919062000be2565b6001600160a01b031660a0816001600160a01b031660601b81525050806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200013857600080fd5b505afa1580156200014d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000173919062000be2565b6001600160a01b031660c0816001600160a01b031660601b81525050806001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015620001c957600080fd5b505afa158015620001de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000204919062000c9c565b600081905550806001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156200024457600080fd5b505afa15801562000259573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027f919062000c9c565b600181905550600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015620002c257600080fd5b505afa158015620002d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002fd919062000c48565b6002805463ffffffff191663ffffffff9290921691909117905590925090506001600160701b038216158015906200033d57506001600160701b03811615155b620003655760405162461bcd60e51b81526004016200035c9062000d40565b60405180910390fd5b6200037083620003f1565b50505050505062000f75565b600080806200038c8585620004fc565b91509150858282604051602001620003a692919062000cb5565b60405160208183030381529060405280519060200120604051602001620003cf92919062000cd7565b60408051601f1981840301815291905280516020909101209695505050505050565b60008060006200040c846200058e60201b620004751760201c565b60025492955090935091506000906200042c9063ffffffff168362000f0a565b905060405180602001604052808263ffffffff166000548762000450919062000ef0565b6200045c919062000eb7565b6001600160e01b039081169091529051600380546001600160e01b031916919092161790556040805160208101909152600154819063ffffffff841690620004a5908762000ef0565b620004b1919062000eb7565b6001600160e01b039081169091529051600480546001600160e01b03191691909216179055506000929092556001556002805463ffffffff191663ffffffff90921691909117905550565b600080826001600160a01b0316846001600160a01b03161415620005345760405162461bcd60e51b81526004016200035c9062000d6c565b826001600160a01b0316846001600160a01b0316106200055657828462000559565b83835b90925090506001600160a01b038216620005875760405162461bcd60e51b81526004016200035c9062000e65565b9250929050565b600080806200059c620007e4565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b158015620005d857600080fd5b505afa158015620005ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000613919062000c9c565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b1580156200064f57600080fd5b505afa15801562000664573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200068a919062000c9c565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015620006cb57600080fd5b505afa158015620006e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000706919062000c48565b9250925092508363ffffffff168163ffffffff1614620007da5760006200072e828662000f0a565b90508063ffffffff1662000760846001600160701b0316866001600160701b0316620007fc60201b620006991760201c565b516200077691906001600160e01b031662000ece565b62000782908862000e9c565b96508063ffffffff16620007b4856001600160701b0316856001600160701b0316620007fc60201b620006991760201c565b51620007ca91906001600160e01b031662000ece565b620007d6908762000e9c565b9550505b5050509193909250565b6000620007f76401000000004262000f32565b905090565b6200080662000b9b565b60008211620008295760405162461bcd60e51b81526004016200035c9062000db1565b82620008455750604080516020810190915260008152620008d1565b6001600160901b038311620008b35760006200086683607086901b62000eb7565b90506001600160e01b03811115620008925760405162461bcd60e51b81526004016200035c9062000e2e565b6040518060200160405280826001600160e01b0316815250915050620008d1565b60006200086684600160701b85620008d760201b6200075a1760201c565b92915050565b60008080620008e786866200098f565b91509150600084806200090a57634e487b7160e01b600052601260045260246000fd5b86880990508281111562000928576200092560018362000ef0565b91505b62000934818462000ef0565b925081620009535762000948858462000eb7565b935050505062000988565b848210620009755760405162461bcd60e51b81526004016200035c9062000df7565b62000982838387620009d8565b93505050505b9392505050565b600080806000198486099050620009a7848662000ece565b9250620009b5838262000ef0565b915082811015620009d057620009cd60018362000ef0565b91505b509250929050565b600080620009e98319600162000e9c565b83169050620009f9818462000eb7565b925062000a07818662000eb7565b94508062000a188119600162000e9c565b62000a24919062000eb7565b62000a3190600162000e9c565b62000a3d908562000ece565b62000a49908662000e9c565b9450600162000a59818562000ece565b62000a6690600262000ef0565b62000a72908262000ece565b905062000a80818562000ece565b62000a8d90600262000ef0565b62000a99908262000ece565b905062000aa7818562000ece565b62000ab490600262000ef0565b62000ac0908262000ece565b905062000ace818562000ece565b62000adb90600262000ef0565b62000ae7908262000ece565b905062000af5818562000ece565b62000b0290600262000ef0565b62000b0e908262000ece565b905062000b1c818562000ece565b62000b2990600262000ef0565b62000b35908262000ece565b905062000b43818562000ece565b62000b5090600262000ef0565b62000b5c908262000ece565b905062000b6a818562000ece565b62000b7790600262000ef0565b62000b83908262000ece565b905062000b91818762000ece565b9695505050505050565b60408051602081019091526000815290565b80516001600160a01b038116811462000bc557600080fd5b919050565b80516001600160701b038116811462000bc557600080fd5b60006020828403121562000bf4578081fd5b620009888262000bad565b60008060006060848603121562000c14578182fd5b62000c1f8462000bad565b925062000c2f6020850162000bad565b915062000c3f6040850162000bad565b90509250925092565b60008060006060848603121562000c5d578283fd5b62000c688462000bca565b925062000c786020850162000bca565b9150604084015163ffffffff8116811462000c91578182fd5b809150509250925092565b60006020828403121562000cae578081fd5b5051919050565b6001600160601b0319606093841b811682529190921b16601482015260280190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6001600160601b031916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b602080825260129082015271556e6f52653a204e4f5f524553455256455360701b604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526026908201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260408201526579207a65726f60d01b606082015260800190565b6020808252601a908201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604082015260600190565b6020808252601e908201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6000821982111562000eb25762000eb262000f49565b500190565b60008262000ec95762000ec962000f5f565b500490565b600081600019048311821515161562000eeb5762000eeb62000f49565b500290565b60008282101562000f055762000f0562000f49565b500390565b600063ffffffff8381169083168181101562000f2a5762000f2a62000f49565b039392505050565b60008262000f445762000f4462000f5f565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60805160601c60a05160601c60c05160601c610f5862000fbc600039600081816101db01526103e301526000818161013f0152610165015260006102910152610f586000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a2e6204511610066578063a2e6204514610106578063a6bb453914610110578063b4d1d79514610118578063c5700a0214610120578063d21220a7146101355761009e565b80630dfe1681146100a35780633ddac953146100c15780635909c0d5146100e15780635a3d5493146100e95780635e6aaf2c146100f1575b600080fd5b6100ab61013d565b6040516100b89190610c44565b60405180910390f35b6100d46100cf366004610b13565b610161565b6040516100b89190610e41565b6100d461026c565b6100d4610272565b6100f9610278565b6040516100b89190610e2d565b61010e610287565b005b6100f96103c1565b6100d46103d0565b6101286103d5565b6040516100b89190610e4a565b6100ab6103e1565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156101d95760408051602081019091526003546001600160e01b031681526101c9906101c49084610802565b610869565b6001600160901b03169050610266565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146102335760405162461bcd60e51b815260040161022a90610dbf565b60405180910390fd5b60408051602081019091526004546001600160e01b0316815261025a906101c49084610802565b6001600160901b031690505b92915050565b60005481565b60015481565b6004546001600160e01b031681565b60008060006102b57f0000000000000000000000000000000000000000000000000000000000000000610475565b60025492955090935091506000906102d39063ffffffff1683610ebd565b905060788163ffffffff1610156102fc5760405162461bcd60e51b815260040161022a90610c58565b60405180602001604052808263ffffffff166000548761031c9190610ea6565b6103269190610e73565b6001600160e01b039081169091529051600380546001600160e01b031916919092161790556040805160208101909152600154819063ffffffff84169061036d9087610ea6565b6103779190610e73565b6001600160e01b039081169091529051600480546001600160e01b03191691909216179055506000929092556001556002805463ffffffff191663ffffffff909216919091179055565b6003546001600160e01b031681565b607881565b60025463ffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006104148585610874565b9150915085828260405160200161042c929190610baf565b60405160208183030381529060405280519060200120604051602001610453929190610bd6565b60408051601f1981840301815291905280516020909101209695505050505050565b60008060006104826108fe565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156104bd57600080fd5b505afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190610b97565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561053057600080fd5b505afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190610b97565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190610b49565b9250925092508363ffffffff168163ffffffff161461068f5760006106058286610ebd565b90508063ffffffff1661062a846001600160701b0316866001600160701b0316610699565b5161063e91906001600160e01b0316610e87565b6106489088610e5b565b96508063ffffffff1661066d856001600160701b0316856001600160701b0316610699565b5161068191906001600160e01b0316610e87565b61068b9087610e5b565b9550505b5050509193909250565b6106a1610ad7565b600082116106c15760405162461bcd60e51b815260040161022a90610d0b565b826106db5750604080516020810190915260008152610266565b6001600160901b0383116107425760006106f983607086901b610e73565b90506001600160e01b038111156107225760405162461bcd60e51b815260040161022a90610d88565b6040518060200160405280826001600160e01b0316815250915050610266565b60006106f9846e010000000000000000000000000000855b60008060006107698686610914565b915091506000848061078b57634e487b7160e01b600052601260045260246000fd5b8688099050828111156107a6576107a3600183610ea6565b91505b6107b08184610ea6565b9250816107cb576107c18584610e73565b93505050506107fb565b8482106107ea5760405162461bcd60e51b815260040161022a90610d51565b6107f5838387610956565b93505050505b9392505050565b61080a610ae9565b6000821580610838575083516001600160e01b03168361082a8183610e87565b92506108369083610e73565b145b6108545760405162461bcd60e51b815260040161022a90610c8f565b60408051602081019091529081529392505050565b805160701c5b919050565b600080826001600160a01b0316846001600160a01b031614156108a95760405162461bcd60e51b815260040161022a90610cc6565b826001600160a01b0316846001600160a01b0316106108c95782846108cc565b83835b90925090506001600160a01b0382166108f75760405162461bcd60e51b815260040161022a90610df6565b9250929050565b600061090f64010000000042610ee2565b905090565b60008080600019848609905061092a8486610e87565b92506109368382610ea6565b91508281101561094e5761094b600183610ea6565b91505b509250929050565b60008061096583196001610e5b565b831690506109738184610e73565b925061097f8186610e73565b94508061098e81196001610e5b565b6109989190610e73565b6109a3906001610e5b565b6109ad9085610e87565b6109b79086610e5b565b945060016109c58185610e87565b6109d0906002610ea6565b6109da9082610e87565b90506109e68185610e87565b6109f1906002610ea6565b6109fb9082610e87565b9050610a078185610e87565b610a12906002610ea6565b610a1c9082610e87565b9050610a288185610e87565b610a33906002610ea6565b610a3d9082610e87565b9050610a498185610e87565b610a54906002610ea6565b610a5e9082610e87565b9050610a6a8185610e87565b610a75906002610ea6565b610a7f9082610e87565b9050610a8b8185610e87565b610a96906002610ea6565b610aa09082610e87565b9050610aac8185610e87565b610ab7906002610ea6565b610ac19082610e87565b9050610acd8187610e87565b9695505050505050565b60408051602081019091526000815290565b6040518060200160405280600081525090565b80516001600160701b038116811461086f57600080fd5b60008060408385031215610b25578182fd5b82356001600160a01b0381168114610b3b578283fd5b946020939093013593505050565b600080600060608486031215610b5d578081fd5b610b6684610afc565b9250610b7460208501610afc565b9150604084015163ffffffff81168114610b8c578182fd5b809150509250925092565b600060208284031215610ba8578081fd5b5051919050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b60208082526019908201527f556e6f52653a20504552494f445f4e4f545f454c415053454400000000000000604082015260600190565b60208082526019908201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526026908201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260408201526579207a65726f60d01b606082015260800190565b6020808252601a908201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604082015260600190565b6020808252601e908201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604082015260600190565b60208082526014908201527f556e6f52653a20494e56414c49445f544f4b454e000000000000000000000000604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6001600160e01b0391909116815260200190565b90815260200190565b63ffffffff91909116815260200190565b60008219821115610e6e57610e6e610ef6565b500190565b600082610e8257610e82610f0c565b500490565b6000816000190483118215151615610ea157610ea1610ef6565b500290565b600082821015610eb857610eb8610ef6565b500390565b600063ffffffff83811690831681811015610eda57610eda610ef6565b039392505050565b600082610ef157610ef1610f0c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212201f8ecece0059f2f29afb80cee9da4ad4f83affc953b3b47ab8f7ea54accfd07064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a2e6204511610066578063a2e6204514610106578063a6bb453914610110578063b4d1d79514610118578063c5700a0214610120578063d21220a7146101355761009e565b80630dfe1681146100a35780633ddac953146100c15780635909c0d5146100e15780635a3d5493146100e95780635e6aaf2c146100f1575b600080fd5b6100ab61013d565b6040516100b89190610c44565b60405180910390f35b6100d46100cf366004610b13565b610161565b6040516100b89190610e41565b6100d461026c565b6100d4610272565b6100f9610278565b6040516100b89190610e2d565b61010e610287565b005b6100f96103c1565b6100d46103d0565b6101286103d5565b6040516100b89190610e4a565b6100ab6103e1565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031614156101d95760408051602081019091526003546001600160e01b031681526101c9906101c49084610802565b610869565b6001600160901b03169050610266565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146102335760405162461bcd60e51b815260040161022a90610dbf565b60405180910390fd5b60408051602081019091526004546001600160e01b0316815261025a906101c49084610802565b6001600160901b031690505b92915050565b60005481565b60015481565b6004546001600160e01b031681565b60008060006102b57f0000000000000000000000000000000000000000000000000000000000000000610475565b60025492955090935091506000906102d39063ffffffff1683610ebd565b905060788163ffffffff1610156102fc5760405162461bcd60e51b815260040161022a90610c58565b60405180602001604052808263ffffffff166000548761031c9190610ea6565b6103269190610e73565b6001600160e01b039081169091529051600380546001600160e01b031916919092161790556040805160208101909152600154819063ffffffff84169061036d9087610ea6565b6103779190610e73565b6001600160e01b039081169091529051600480546001600160e01b03191691909216179055506000929092556001556002805463ffffffff191663ffffffff909216919091179055565b6003546001600160e01b031681565b607881565b60025463ffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006104148585610874565b9150915085828260405160200161042c929190610baf565b60405160208183030381529060405280519060200120604051602001610453929190610bd6565b60408051601f1981840301815291905280516020909101209695505050505050565b60008060006104826108fe565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156104bd57600080fd5b505afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190610b97565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b815260040160206040518083038186803b15801561053057600080fd5b505afa158015610544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105689190610b97565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e09190610b49565b9250925092508363ffffffff168163ffffffff161461068f5760006106058286610ebd565b90508063ffffffff1661062a846001600160701b0316866001600160701b0316610699565b5161063e91906001600160e01b0316610e87565b6106489088610e5b565b96508063ffffffff1661066d856001600160701b0316856001600160701b0316610699565b5161068191906001600160e01b0316610e87565b61068b9087610e5b565b9550505b5050509193909250565b6106a1610ad7565b600082116106c15760405162461bcd60e51b815260040161022a90610d0b565b826106db5750604080516020810190915260008152610266565b6001600160901b0383116107425760006106f983607086901b610e73565b90506001600160e01b038111156107225760405162461bcd60e51b815260040161022a90610d88565b6040518060200160405280826001600160e01b0316815250915050610266565b60006106f9846e010000000000000000000000000000855b60008060006107698686610914565b915091506000848061078b57634e487b7160e01b600052601260045260246000fd5b8688099050828111156107a6576107a3600183610ea6565b91505b6107b08184610ea6565b9250816107cb576107c18584610e73565b93505050506107fb565b8482106107ea5760405162461bcd60e51b815260040161022a90610d51565b6107f5838387610956565b93505050505b9392505050565b61080a610ae9565b6000821580610838575083516001600160e01b03168361082a8183610e87565b92506108369083610e73565b145b6108545760405162461bcd60e51b815260040161022a90610c8f565b60408051602081019091529081529392505050565b805160701c5b919050565b600080826001600160a01b0316846001600160a01b031614156108a95760405162461bcd60e51b815260040161022a90610cc6565b826001600160a01b0316846001600160a01b0316106108c95782846108cc565b83835b90925090506001600160a01b0382166108f75760405162461bcd60e51b815260040161022a90610df6565b9250929050565b600061090f64010000000042610ee2565b905090565b60008080600019848609905061092a8486610e87565b92506109368382610ea6565b91508281101561094e5761094b600183610ea6565b91505b509250929050565b60008061096583196001610e5b565b831690506109738184610e73565b925061097f8186610e73565b94508061098e81196001610e5b565b6109989190610e73565b6109a3906001610e5b565b6109ad9085610e87565b6109b79086610e5b565b945060016109c58185610e87565b6109d0906002610ea6565b6109da9082610e87565b90506109e68185610e87565b6109f1906002610ea6565b6109fb9082610e87565b9050610a078185610e87565b610a12906002610ea6565b610a1c9082610e87565b9050610a288185610e87565b610a33906002610ea6565b610a3d9082610e87565b9050610a498185610e87565b610a54906002610ea6565b610a5e9082610e87565b9050610a6a8185610e87565b610a75906002610ea6565b610a7f9082610e87565b9050610a8b8185610e87565b610a96906002610ea6565b610aa09082610e87565b9050610aac8185610e87565b610ab7906002610ea6565b610ac19082610e87565b9050610acd8187610e87565b9695505050505050565b60408051602081019091526000815290565b6040518060200160405280600081525090565b80516001600160701b038116811461086f57600080fd5b60008060408385031215610b25578182fd5b82356001600160a01b0381168114610b3b578283fd5b946020939093013593505050565b600080600060608486031215610b5d578081fd5b610b6684610afc565b9250610b7460208501610afc565b9150604084015163ffffffff81168114610b8c578182fd5b809150509250925092565b600060208284031215610ba8578081fd5b5051919050565b6bffffffffffffffffffffffff19606093841b811682529190921b16601482015260280190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b6bffffffffffffffffffffffff1916600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b6001600160a01b0391909116815260200190565b60208082526019908201527f556e6f52653a20504552494f445f4e4f545f454c415053454400000000000000604082015260600190565b60208082526019908201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604082015260600190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604082015264455353455360d81b606082015260800190565b60208082526026908201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260408201526579207a65726f60d01b606082015260800190565b6020808252601a908201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604082015260600190565b6020808252601e908201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604082015260600190565b60208082526014908201527f556e6f52653a20494e56414c49445f544f4b454e000000000000000000000000604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6001600160e01b0391909116815260200190565b90815260200190565b63ffffffff91909116815260200190565b60008219821115610e6e57610e6e610ef6565b500190565b600082610e8257610e82610f0c565b500490565b6000816000190483118215151615610ea157610ea1610ef6565b500290565b600082821015610eb857610eb8610ef6565b500390565b600063ffffffff83811690831681811015610eda57610eda610ef6565b039392505050565b600082610ef157610ef1610f0c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212201f8ecece0059f2f29afb80cee9da4ad4f83affc953b3b47ab8f7ea54accfd07064736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 23,
        "contract": "contracts/TwapOraclePriceFeed.sol:TwapOraclePriceFeed",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/TwapOraclePriceFeed.sol:TwapOraclePriceFeed",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 27,
        "contract": "contracts/TwapOraclePriceFeed.sol:TwapOraclePriceFeed",
        "label": "blockTimestampLast",
        "offset": 0,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 30,
        "contract": "contracts/TwapOraclePriceFeed.sol:TwapOraclePriceFeed",
        "label": "price0Average",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(uq112x112)1108_storage"
      },
      {
        "astId": 33,
        "contract": "contracts/TwapOraclePriceFeed.sol:TwapOraclePriceFeed",
        "label": "price1Average",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(uq112x112)1108_storage"
      }
    ],
    "types": {
      "t_struct(uq112x112)1108_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 1107,
            "contract": "contracts/TwapOraclePriceFeed.sol:TwapOraclePriceFeed",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}